import os
from dadata import Dadata
from dotenv import load_dotenv


class DadataClient:
    def __init__(self):
        load_dotenv()

        self.api_token = os.getenv("DADATA_API_KEY")
        self.secret = os.getenv("DADATA_SECRET_KEY")

        if not self.api_token:
            raise RuntimeError("‚ùå DADATA API key is not set. Please define DADATA_API_KEY in your .env file.")

        self.client = Dadata(self.api_token, self.secret)
        self.check_limits()

    def check_limits(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        try:
            balance = self.client.get_balance()
            stats = self.client.get_daily_stats()
            used = stats["services"].get("suggestions", 0)
            remaining = stats["remaining"].get("suggestions", 0)

            print(f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ")
            print(f"üîç DaData –ª–∏–º–∏—Ç: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {used}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining}")

            if remaining < 1000:
                print("‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è suggestions! –ü–æ–¥—É–º–∞–π –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.")
            if remaining == 0:
                raise RuntimeError("üö´ –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ suggestions –∏—Å—á–µ—Ä–ø–∞–Ω!")

        except Exception as e:
            raise RuntimeError(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤ DaData: {e}")

    def suggest(self, param, normalized_name):
        result = self.client.suggest(param, normalized_name)
        return result

    def find_by_id(self, param, fias_id):
        return self.client.find_by_id(param, fias_id)
